#' Read and wrangles Level defition table
#'
#' @param file
#'
#' @return
#'
#' @examples
read_lev_def <- function(file){
read_excel(path = file, skip = 1, col_names = level_def_lab)
}
# Active regressor summary ------------------------------------------------
#' Read and wrangles Active Regressor's summary
#'
#' @param file
#'
#' @return
#'
#' @examples
read_act_reg_summ <- function(file){
read_excel(path = file, skip = 2, col_names = act_reg_summ_lab)
}
# Causal Factor Cleansing -------------------------------------------------
#' Read and wrangles Causal Factor Cleansing
#'
#' @param file
#'
#' @return
#'
#' @examples
read_causal_factor_clean <- function(file){
suppressMessages({
read_excel(path = file, skip = 1) %>%
rename(fcst_item = 1, ausal_data_class_1 = 2, causal_data_class_2 = 3)
})
}
# Edit regressor values ---------------------------------------------------
#' Read and wrangles Edit Regressor Values
#'
#' @param file
#'
#' @return
#' @examples
read_edit_reg_values <- function(file){
read_excel(path = file) %>%
rename(reg_name = 1, reg_category = 2, reg_date = 3, reg_value = 4) %>%
mutate(reg_date = as.Date(reg_date))
}
# Forecast Comparison -----------------------------------------------------
#' Read and wrangles Forecast Comparison
#'
#' @param file
#'
#' @return
#'
#' @examples
read_fcst_comp <- function(file){
suppressMessages({
read_excel(path = file, skip = 2) %>%
rename(fcst_item = 1, item_category = 2, actuals_category = 3
, lifecycle = 4, series_type = 5, scenario = 6) %>%
clean_names() %>% # janitor
setNames(nm = rename_knx(names(.)))
})
}
# Regressor items ---------------------------------------------
#' Read and wrangles Regressor items
#'
#' @param file
#'
#' @return
#'
#' @examples
read_fcst_reg_item <- function(file){
read_excel(path = file, skip = 3, col_names = fcst_reg_items_lab)
}
# Regressor usage summary -------------------------------------------------
#' Read and wrangles Regressor Usage Summary
#'
#' @param file
#'
#' @return
#'
#' @examples
read_reg_usage_summ <- function(file){
read_excel(path = file, skip = 1, col_names = reg_usage_summ_lab)
}
# Regressors --------------------------------------------------------------
#' Read and wrangles Regressors
#'
#' @param file
#'
#' @return
#'
#' @examples
read_regressors <- function(file){
read_excel(path = file) %>%
setNames(nm = c("select", "reg_name", "reg_category"))
}
# Statistical Outlier Cleansing -------------------------------------------
#' Read and wrangles Statistical Outlier Cleansing
#'
#' @param file
#'
#' @return
#'
#' @examples
read_stat_outlier_clean <- function(file){
suppressMessages({
read_excel(path = file, skip = 1) %>%
rename(fcst_item = 1, fcst_category = 2, actuals_category = 3, outlier_conf = 4
, outlier_summary = 5, series_type_1 = 6, series_type_2 = 7) %>%
clean_names() %>% # janitor
setNames(nm = rename_knx(names(.)))
})
}
# Column names ------------------------------------------------------------
fcst_conf_lab <- c("abc", "xyz", "total_buckets", "fcst_item", "baseline"
, "item_category", "unit_measure_fcst", "col_x8"
, "unit_measure_control_set", "actuals_category", "item_usage_rule"
, "item_status_update", "col_x13", "configured", "col_x15"
, "lifecycle", "col_x17", "model_param_set", "skip_leading_zeros"
, "holdout", "fcst_model", "trend_decay_factor"
, "fit_measure", "model_constant_usage", "calendar", "col_x26"
, "history_window", "fcst_horizon", "seasonal_cycle"
, "ma_adjust", "conf_level", "col_x32", "best_fit_model_set"
, "best_fit_holdout_period", "best_fit_fcst_lag", "col_x36", "arima_constant"
, "arima_terms_ar", "arima_terms_ma", "arima_terms_diff", "col_x41", "ets_param_set"
, "elastic_net_weight", "elastic_net_regu"
, "arimax_constant", "arimax_diff", "ac_conf_level"
, "ac_conf_level_apply", "col_x49", "hist_start_date", "hist_items_actuals"
, "hist_from_other_items", "hist_from_count", "col_x54"
, "hist_by_other_items", "col_x56", "adjust_start_date", "adjust_profile"
, "adjust_quantity", "adjust_multiplier", "col_x61", "fcst_start_date", "fcst_stop_date"
, "override_fcst_start_date", "override_fcst_stop_date", "outlier_type", "outlier_view"
, "has_outliers", "outlier_data", "outlier_detection"
, "outlier_threshold", "outlier_ma_window", "output_errors"
, "output_charac")
segmentation_lab <- c("forecast_item", "abc", "abc_volume", "abc_revenue", "xyz", "total_volume"
, "total_volume_perc", "total_volume_cum", "total_revenue", "total_revenue_perc"
, "total_revenue_cum", "cov")
level_def_lab <- c("gmid", "descr", "local_descr", "customer"
, "prod_family", "site", "part_market", "gmid_site"
, "gmid_2", "gmid_region", "market_gmid_local_descr"
, "gmid_customer_channel", "fcst_item_editable", "fcst_item_calculated"
, "fcst_item_current")
act_reg_summ_lab <- c("fcst_item", "item_category", "fcst_model", "reg_name", "lag", "col_x6"
, "estimate", "p_value", "standard_error", "t_stat")
rename_cols <- c("x01_01_"="jan_20", "x02_01_"="feb_20", "x03_01_"="mar_20"
, "x04_01_"="apr_20", "x05_01_"="may_20", "x06_01_"="jun_20"
, "x07_01_"="jul_20", "x08_01_"="aug_20", "x09_01_"="sep_20"
, "x10_01_"="oct_20", "x11_01_"="nov_20", "x12_01_"="dec_20"
, "x2"="fcst_type", "reference_plan_1_unconstrained_forecast"="unc_fcst"
, "bb_statistical"="stat_fcst")
fcst_reg_items_lab <- c("select", "col_x2", "fcst_item", "col_x4", "fcst_category", "col_x6"
, "reg_total", "reg_active"
, "weight_decay_factor", "elastic_net_weight"
, "elastic_net_regu", "arimax_constant", "arimax_diff"
, "col_x14", "skip_leading_zeros", "model_param_set"
, "param_model_constant", "fcst_model", "trend_decay_factor"
, "ac_conf_level", "col_x21", "actuals_category"
, "x_6", "history_window", "fcst_horizon", "seasonal_cycle")
reg_usage_summ_lab <- c("fcst_item", "reg_name", "process_rule", "lag")
require(devtools)
check()
build()
#'
#' @param file
#' @param cycle_mode
#' @param task_config
#'
#' @importFrom sftools read_fcst_conf
#' @return
#' @export
#'
#' @examples
read_knx <- function(file, cycle_mode = F, task_config = FALSE){
file_clean <- str_remove_all(file, pattern = ".*(\\\\|/)|\\..+$")
if(cycle_mode == T){
date <- format(as.Date(task_config[["date"]][["current"]]), "%b - %Y")
dir_in <- paste0(paste0(task_config[["directory"]][c("root", "default_input", "market")], collapse = ""), date, "/")
if(dir.exists(dir_in)==F & task_config[["directory"]][["create_if_empty"]] == T){
dir.create(dir_in, recursive = T)
}
}
knx_table_func <- fnc_map %>%
filter(file_clean == file_name) %>%
pull(int_function)
if(task_config==F){
match.fun(knx_table_func)(file)
} else {
match.fun(knx_table_func)(paste0(dir_in, file))
}
}
build()
require(devtools)
build()
require(devtools)
build()
# Function mapping --------------------------------------------------------
fnc_map <- tibble::tribble(
~file_name,                ~int_function,
"[Forecast Item] - ABC XYZ Calculation",                 "read_seg",
"[Forecast Item] Configuration",           "read_fcst_conf",
"[Forecast Item] Level Definition",             "read_lev_def",
"Active Regressor Summary",        "read_act_reg_summ",
"Causal Factor Cleansing - Summary", "read_causal_factor_clean",
"Edit Regressor Values",     "read_edit_reg_values",
"Forecast Comparison",           "read_fcst_comp",
"Forecast Items",       "read_fcst_reg_item",
"life savings",           "read_fcst_conf",
"Regressor Usage Summary",      "read_reg_usage_summ",
"Regressor Values",          "read_reg_values",
"Regressors",          "read_regressors",
"Statistical Outliers Cleansing", "read_stat_outlier_clean)"
)
# Read KNX -----------------------------------------------------------
#' Maps the file name and assigns its respective function
#'
#' @param file
#' @param cycle_mode
#' @param task_config
#'
#' @importFrom sftools read_fcst_conf
#' @return
#' @export
#'
#' @examples
read_knx <- function(file, cycle_mode = F, task_config = FALSE){
file_clean <- str_remove_all(file, pattern = ".*(\\\\|/)|\\..+$")
if(cycle_mode == T){
date <- format(as.Date(task_config[["date"]][["current"]]), "%b - %Y")
dir_in <- paste0(paste0(task_config[["directory"]][c("root", "default_input", "market")], collapse = ""), date, "/")
if(dir.exists(dir_in)==F & task_config[["directory"]][["create_if_empty"]] == T){
dir.create(dir_in, recursive = T)
}
}
knx_table_func <- fnc_map %>%
filter(file_clean == file_name) %>%
pull(int_function)
if(task_config==F){
match.fun(knx_table_func)(file)
} else {
match.fun(knx_table_func)(paste0(dir_in, file))
}
}
rename_knx <- function(col_names){
suppressWarnings(
tibble(col_names) %>%
mutate(fix = str_replace_all(col_names, rename_cols) %>%
parse_date_time(orders = "my") %>%
str_remove_all(pattern = " UTC") %>%
ifelse(is.na(.)==T, col_names, .)) %>%
pull(fix)
)
}
read_seg <- function(file){
read_excel(path = file, skip = 2, col_names = segmentation_lab)
}
read_fcst_conf <- function(file){
read_excel(path = file, skip = 4, col_names = fcst_conf_lab) #%>%
#mutate_at(.vars = vars(matches("_date")), .funs = ~as.Date(.x))
}
read_lev_def <- function(file){
read_excel(path = file, skip = 1, col_names = level_def_lab)
}
read_act_reg_summ <- function(file){
read_excel(path = file, skip = 2, col_names = act_reg_summ_lab)
}
# Causal Factor Cleansing -------------------------------------------------
read_causal_factor_clean <- function(file){
suppressMessages({
read_excel(path = file, skip = 1) %>%
rename(fcst_item = 1, ausal_data_class_1 = 2, causal_data_class_2 = 3)
})
}
read_edit_reg_values <- function(file){
read_excel(path = file) %>%
rename(reg_name = 1, reg_category = 2, reg_date = 3, reg_value = 4) %>%
mutate(reg_date = as.Date(reg_date))
}
read_fcst_comp <- function(file){
suppressMessages({
read_excel(path = file, skip = 2) %>%
rename(fcst_item = 1, item_category = 2, actuals_category = 3
, lifecycle = 4, series_type = 5, scenario = 6) %>%
clean_names() %>% # janitor
setNames(nm = rename_knx(names(.)))
})
}
read_fcst_reg_item <- function(file){
read_excel(path = file, skip = 3, col_names = fcst_reg_items_lab)
}
read_reg_usage_summ <- function(file){
read_excel(path = file, skip = 1, col_names = reg_usage_summ_lab)
}
read_regressors <- function(file){
read_excel(path = file) %>%
setNames(nm = c("select", "reg_name", "reg_category"))
}
read_stat_outlier_clean <- function(file){
suppressMessages({
read_excel(path = file, skip = 1) %>%
rename(fcst_item = 1, fcst_category = 2, actuals_category = 3, outlier_conf = 4
, outlier_summary = 5, series_type_1 = 6, series_type_2 = 7) %>%
clean_names() %>% # janitor
setNames(nm = rename_knx(names(.)))
})
}
# Column names ------------------------------------------------------------
fcst_conf_lab <- c("abc", "xyz", "total_buckets", "fcst_item", "baseline"
, "item_category", "unit_measure_fcst", "col_x8"
, "unit_measure_control_set", "actuals_category", "item_usage_rule"
, "item_status_update", "col_x13", "configured", "col_x15"
, "lifecycle", "col_x17", "model_param_set", "skip_leading_zeros"
, "holdout", "fcst_model", "trend_decay_factor"
, "fit_measure", "model_constant_usage", "calendar", "col_x26"
, "history_window", "fcst_horizon", "seasonal_cycle"
, "ma_adjust", "conf_level", "col_x32", "best_fit_model_set"
, "best_fit_holdout_period", "best_fit_fcst_lag", "col_x36", "arima_constant"
, "arima_terms_ar", "arima_terms_ma", "arima_terms_diff", "col_x41", "ets_param_set"
, "elastic_net_weight", "elastic_net_regu"
, "arimax_constant", "arimax_diff", "ac_conf_level"
, "ac_conf_level_apply", "col_x49", "hist_start_date", "hist_items_actuals"
, "hist_from_other_items", "hist_from_count", "col_x54"
, "hist_by_other_items", "col_x56", "adjust_start_date", "adjust_profile"
, "adjust_quantity", "adjust_multiplier", "col_x61", "fcst_start_date", "fcst_stop_date"
, "override_fcst_start_date", "override_fcst_stop_date", "outlier_type", "outlier_view"
, "has_outliers", "outlier_data", "outlier_detection"
, "outlier_threshold", "outlier_ma_window", "output_errors"
, "output_charac")
segmentation_lab <- c("forecast_item", "abc", "abc_volume", "abc_revenue", "xyz", "total_volume"
, "total_volume_perc", "total_volume_cum", "total_revenue", "total_revenue_perc"
, "total_revenue_cum", "cov")
level_def_lab <- c("gmid", "descr", "local_descr", "customer"
, "prod_family", "site", "part_market", "gmid_site"
, "gmid_2", "gmid_region", "market_gmid_local_descr"
, "gmid_customer_channel", "fcst_item_editable", "fcst_item_calculated"
, "fcst_item_current")
act_reg_summ_lab <- c("fcst_item", "item_category", "fcst_model", "reg_name", "lag", "col_x6"
, "estimate", "p_value", "standard_error", "t_stat")
rename_cols <- c("x01_01_"="jan_20", "x02_01_"="feb_20", "x03_01_"="mar_20"
, "x04_01_"="apr_20", "x05_01_"="may_20", "x06_01_"="jun_20"
, "x07_01_"="jul_20", "x08_01_"="aug_20", "x09_01_"="sep_20"
, "x10_01_"="oct_20", "x11_01_"="nov_20", "x12_01_"="dec_20"
, "x2"="fcst_type", "reference_plan_1_unconstrained_forecast"="unc_fcst"
, "bb_statistical"="stat_fcst")
fcst_reg_items_lab <- c("select", "col_x2", "fcst_item", "col_x4", "fcst_category", "col_x6"
, "reg_total", "reg_active"
, "weight_decay_factor", "elastic_net_weight"
, "elastic_net_regu", "arimax_constant", "arimax_diff"
, "col_x14", "skip_leading_zeros", "model_param_set"
, "param_model_constant", "fcst_model", "trend_decay_factor"
, "ac_conf_level", "col_x21", "actuals_category"
, "x_6", "history_window", "fcst_horizon", "seasonal_cycle")
reg_usage_summ_lab <- c("fcst_item", "reg_name", "process_rule", "lag")
require(sftools)
read_knx("//E21flsbcnschub/BCN_SC_HUB/3 - Forecast/10 - Kinaxis Operating Cycle/0 - Data/0 - Kinaxis data extractions/Nordics/Apr - 2020/[Forecast Item] Configuration.xlsx")
require(tidyverse)
read_knx("//E21flsbcnschub/BCN_SC_HUB/3 - Forecast/10 - Kinaxis Operating Cycle/0 - Data/0 - Kinaxis data extractions/Nordics/Apr - 2020/[Forecast Item] Configuration.xlsx")
require(readxl)
read_knx("//E21flsbcnschub/BCN_SC_HUB/3 - Forecast/10 - Kinaxis Operating Cycle/0 - Data/0 - Kinaxis data extractions/Nordics/Apr - 2020/[Forecast Item] Configuration.xlsx")
sftools::read_knx("//E21flsbcnschub/BCN_SC_HUB/3 - Forecast/10 - Kinaxis Operating Cycle/0 - Data/0 - Kinaxis data extractions/Nordics/Apr - 2020/[Forecast Item] Configuration.xlsx")
check()
check()
check()
check()
check()
check()
check()
fnc_map
check()
fnc_map
fnc_map %>% pull("int_function")
fnc_map
which(fnc_map[["file_name"]]==file_clean)
file
file <- "//E21flsbcnschub/BCN_SC_HUB/3 - Forecast/10 - Kinaxis Operating Cycle/0 - Data/0 - Kinaxis data extractions/Nordics/Apr - 2020/[Forecast Item] Configuration.xlsx"
str_remove_all(file, pattern = ".*(\\\\|/)|\\..+$")
file_clean <- str_remove_all(file, pattern = ".*(\\\\|/)|\\..+$")
fnc_map %>%
filter(file_name == file_clean) %>%
pull("int_function")
which(fnc_map[["file_name"]]==file_clean)
fnc_map
knx_table_func <- knx_table_func[["int_function"]][which(fnc_map[["file_name"]]==file_clean)]
knx_table_func <- fnc_map[["int_function"]][which(fnc_map[["file_name"]]==file_clean)]
knx_table_func
check()
build()
require(devtools)
check()
build()
require(devtools)
build()
require(devtools)
check()
build()
require(devtools)
build()
require(devtools)
build()
require(tidyverse)
o <- "\\E21flsbcnschub\BCN_SC_HUB\3 - Forecast\10 - Kinaxis Operating Cycle\0 - Data\0 - Kinaxis data extractions\Nordics\Apr - 2020\Active Regressor Summary.xlsx"
require(stringr)
fnc_map <- tibble::tribble(
~file_name,                ~int_function,
"[Forecast Item] - ABC XYZ Calculation",                 "read_seg",
"[Forecast Item] Configuration",           "read_fcst_conf",
"[Forecast Item] Level Definition",             "read_lev_def",
"Active Regressor Summary",        "read_act_reg_summ",
"Causal Factor Cleansing - Summary", "read_causal_factor_clean",
"Edit Regressor Values",     "read_edit_reg_values",
"Forecast Comparison",           "read_fcst_comp",
"Forecast Items",       "read_fcst_reg_item",
"life savings",           "read_fcst_conf",
"Regressor Usage Summary",      "read_reg_usage_summ",
"Regressor Values",          "read_reg_values",
"Regressors",          "read_regressors",
"Statistical Outliers Cleansing",  "read_stat_outlier_clean"
)
fnc_map$file_name
fnc_map$file_name %>% clipr::write_clip()
if (missing(gbu_path)) {
gbu_path <- "//E21flsbcnschub/BCN_SC_HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
local_env <- new.env()
path <- "//E21flsbcnschub/BCN_SC_HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
path
local_env <- new.env()
load(path, envir = local_env)
local_env
local_env$GBU
names(local_env[["GBU"]]) <- c("market", "gmid", "activity", "activity_pfwd", "gbu")
local_env$GBU
local_env$GBU %>% head()
require(tidyverse)
local_env$GBU %>% head()
local_env[["GBU"]][["key"]] <- paste0(strtrim(local_env[["GBU"]][["market"]], 2), ": ", local_env[["GBU"]][["gmid"]])
local_env$GBU %>% head()
gbu <- local_env[["GBU"]][c("key", "gbu")]
gbu
tmp <- local_env[["GBU"]][c("key", "gbu")]
gbu <- as_tibble(tmp[nchar(tmp[["key"]])>5,])
gbu
gbu$gbu %>% unique()
path <- "//E21flsbcnschub/BCN_SC_HUB/SC.DATA/DATA/Active/Specific.LSD.Rdata"
load(path, envir = local_env)
local_env
local_env$LSD
load(path, envir = local_env)
names(local_env[["LSD"]]) <- c("loc", "gmid", "status", "lsd")
local_env$LSD %>% head()
local_env[["LSD"]][["key"]] <- paste0(strtrim(local_env[["LSD"]][["market"]], 2), ": ", local_env[["LSD"]][["gmid"]])
local_env$LSD %>% head()
names(local_env[["LSD"]]) <- c("market", "gmid", "status", "lsd")
local_env[["LSD"]][["key"]] <- paste0(strtrim(local_env[["LSD"]][["market"]], 2), ": ", local_env[["LSD"]][["gmid"]])
local_env$LSD %>% head()
tmp <- local_env[["LSD"]][c("key", "lsd")]
tmp
out <- as_tibble(tmp[nchar(tmp[["key"]])>5,])
out
#' @param on_globalenv logical. Defines is the dataframe should be loaded in the global environment or not.
#' @return tibble
#' @author Obryan Poyser
#'
#' @importFrom dplyr as_tibble
#'
#' @examples
#' \dontrun{
#' load_gbu(on_globalenv = T)
#' }
load_db <- function(db, path=TRUE, on_globalenv=FALSE){
local_env <- new.env()
if(db == "GBU"){
if(path == TRUE){
path <- "//E21flsbcnschub/BCN_SC_HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(path, envir = local_env)
names(local_env[["GBU"]]) <- c("market", "gmid", "activity", "activity_pfwd", "gbu")
local_env[["GBU"]][["key"]] <- paste0(strtrim(local_env[["GBU"]][["market"]], 2), ": ", local_env[["GBU"]][["gmid"]])
tmp <- local_env[["GBU"]][c("key", "gbu")]
gbu <- as_tibble(tmp[nchar(tmp[["key"]])>5,])
if(on_globalenv==T){
gbu <<- gbu
} else {
return(gbu)
}
} else if(db == "LSD"){
if(path == TRUE){
path <- "//E21flsbcnschub/BCN_SC_HUB/SC.DATA/DATA/Active/Specific.LSD.Rdata"
}
load(path, envir = local_env)
names(local_env[["LSD"]]) <- c("market", "gmid", "status", "lsd")
local_env[["LSD"]][["key"]] <- paste0(strtrim(local_env[["LSD"]][["market"]], 2), ": ", local_env[["LSD"]][["gmid"]])
tmp <- local_env[["LSD"]][c("key", "lsd")]
lsd <- as_tibble(tmp[nchar(tmp[["key"]])>5,])
if(on_globalenv==T){
lsd <<- lsd
} else {
return(lsd)
}
}
}
load_db()
load_db(db = "GBU")
load_db(db = "LSD")
require(devtools)
check()
build()
build()
require(devtools)
build()
