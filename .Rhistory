if(missing(gbu_path)){
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(gbu_path)
gbu <<- GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique()
message("GBU (original source) and gbu (tidy version) have been exported to the global env.")
}
document("sftools")
build("sftools")
if(missing(gbu_path)){
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(gbu_path)
gbu <<- GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique()
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
load(gbu_path)
GBUI
GBU
GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique()
GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique() %>% filter(gbu!="")
load_gbu <- function(gbu_path){
if(missing(gbu_path)){
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(gbu_path)
gbu <<- GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique() %>%
filter(gbu!="")
message("GBU (original source) and gbu (tidy version) have been exported to the global env.")
}
load_gbu()
load_gbu <- function(gbu_path){
if(missing(gbu_path)){
gbu_path <- "//sinsdfs01/regional$/APJ-SC-HUB/SC.DATA/DATA/Active/Specific.GBU.Rdata"
}
load(gbu_path)
gbu <<- GBU %>%
as_tibble() %>%
mutate(key=paste0(str_sub(Market.Code, start = 1, end = 2), "-", GMID.Code)) %>%
dplyr::select(key, gmid=GMID.Code, gbu=GBU) %>%
unique() %>%
filter(gbu!="")
message("gbu (tidy version) have been exported to the global env.")
}
load_gbu()
build("sftools")
sum_twelve <- purrr::possibly(function(series){
length <- length(series)
sum(series[(length-11):length], na.rm = T)
}, otherwise = 0)
build("sftools")
require(devtools)
setwd("..")
build("sftools")
setwd("..")
require(devtools)
document("sftools")
build("sftools")
sftools:::load_lifesavers()
sftools:::load_gbu()
dir_path <- "C:/Users/I0415596/Desktop/"
# Getting files' data
reg_list_files <- list.files(dir_path, pattern = "[0-9]_reg_list.csv")
reg_values_files <- list.files(dir_path, pattern = "[0-9]_reg_values.csv")
reg_list_files
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_list_data
reg_values_data
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
require(tidyverse)
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
reg_values_data
reg_values_data
reg_values_data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data
reg_values_data
added_reg_values <- bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
added_reg_list <- bind_rows(reg_list_data, .id = "user") %>%
mutate(Select="N") %>%
dplyr::select(user, Select, Name, Category)
added_reg_values
added_reg_list
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
added_reg_values <- bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
added_reg_values
added_reg_list <- bind_rows(reg_list_data, .id = "user") %>%
mutate(Select="N") %>%
dplyr::select(user, Select, Name, Category)
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
message(
paste0(names(reg_list_data)," added ", map(reg_list_data, nrow), " regressors \n")
, paste0(names(reg_values_data)," added ", map(reg_values_data, nrow), " values \n")
)
reg_values_data
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
reg_values_data
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year))
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year))
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
ungroup() %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
reg_values_data
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
reg_list_data
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
ungroup() %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
reg_values_data
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
message(
paste0(names(reg_list_data)," added ", map(reg_list_data, nrow), " regressors \n")
, paste0(names(reg_values_data)," added ", map(reg_values_data, nrow), " values \n")
)
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
unique()
reg_values_data
bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
ungroup() %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
reg_values_data
# Getting files' data
reg_list_files <- list.files(dir_path, pattern = "[0-9]_reg_list.csv")
reg_values_files <- list.files(dir_path, pattern = "[0-9]_reg_values.csv")
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
message(
paste0(names(reg_list_data)," added ", map(reg_list_data, nrow), " regressors \n")
, paste0(names(reg_values_data)," added ", map(reg_values_data, nrow), " values \n")
)
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
) %>%
ungroup() %>%
unique()
# Getting files' data
reg_list_files <- list.files(dir_path, pattern = "[0-9]_reg_list.csv")
reg_values_files <- list.files(dir_path, pattern = "[0-9]_reg_values.csv")
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
message(
paste0(names(reg_list_data)," added ", map(reg_list_data, nrow), " regressors \n")
, paste0(names(reg_values_data)," added ", map(reg_values_data, nrow), " values \n")
)
map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
})
)
map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
}) %>% ungroup()
) %>%
unique()
reg_list_files <- list.files(dir_path, pattern = "[0-9]_reg_list.csv")
reg_values_files <- list.files(dir_path, pattern = "[0-9]_reg_values.csv")
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_values_data
map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
}) %>% ungroup()
) %>%
unique()
reg_values_data
reg_values_data
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
}) %>% ungroup()
) %>%
unique()
reg_values_data
reg_list_data
reg_list_data %>% bind_rows(.id="user")
# Getting files' data
reg_list_files <- list.files(dir_path, pattern = "[0-9]_reg_list.csv")
reg_values_files <- list.files(dir_path, pattern = "[0-9]_reg_values.csv")
# loading data
reg_list_data <- purrr::map(paste0(dir_path, reg_list_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_values_data <- purrr::map(paste0(dir_path, reg_values_files)
, .f = ~suppressMessages(readr::read_csv(.x)))
reg_list_data
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_values_data
reg_values_data %>% bind_rows()
reg_values_data %>% bind_rows(.id = "user")
reg_values_data
reg_values_data
reg_values_data
reg_values_data$I0415595
reg_values_data$I0415595
reg_values_data$I0415595
map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
}) %>% ungroup()
) %>%
unique()
reg_values_data <- map(reg_values_data, ~.x %>%
group_by(Regressor, Category, Month, Year) %>%
do({
bind_rows(., .[nrow(.),] %>%
mutate(Quantity=0
, Year=ifelse(Month==12, Year+1, Year)
, Month=ifelse(Month==12, 1, Month+1)
)
)
}) %>% ungroup()
) %>%
unique()
# Naming frames
names(reg_list_data) <- stringr::str_remove_all(reg_list_files, "_reg_list.csv")
names(reg_values_data) <- stringr::str_remove_all(reg_values_files, "_reg_values.csv")
reg_list_data
added_reg_values <- bind_rows(reg_values_data, .id = "user") %>%
mutate(Date=paste0(str_pad(Month, width = 2, pad = "0", side = "left"), "-01-", Year)) %>%
ungroup() %>%
dplyr::select(user, Regressor, Category, Date, Quantity)
added_reg_values
added_reg_list <- bind_rows(reg_list_data, .id = "user") %>%
mutate(Select="N") %>%
dplyr::select(user, Select, Name, Category)
added_reg_values
added_reg_list
added_reg_values
reg_values
sftools::load_reg_inputs()
reg_values
added_reg_values[,-c(1, 2)]
reg_values
added_reg_values
reg_values, added_reg_values[,-c(1)]
added_reg_values[,-c(1)]
bind_rows(reg_values, added_reg_values[,-c(1)])
new_reg_values <- bind_rows(reg_values, added_reg_values[,-c(1)])
new_reg_list <- bind_rows(reg_list, added_reg_list[,-1])
new_reg_values
message("\n\n--------Analyzing Regressors' list--------\n")
message("1. Checking for category anomalies")
if(all((added_reg_list$Category %in% reg_list$Category)==T)==T){
message(">>> PASSED\n")
} else {
message(">>> FAILED\n")
error <- added_reg_list %>%
mutate(error=ifelse(Category %in% unique(reg_list$Category), T, F)) %>%
filter(error==F)
return(error)
break()
}
message("2. Filtering unique regressors' names")
new_reg_values <- unique(new_reg_list)
new_reg_values
new_reg_values %>% tail()
message("\n\n--------Analyzing Regressors' values--------\n")
message("1. Checking for names' anomalies in 'reg_values'")
if(all(is.na(added_reg_values[[1]])==F)==T){
message(">>> PASSED\n")
} else {
stop(">>> FAILED\n")
}
message("2. Checking for category anomalies")
if(all((added_reg_values$Category %in% reg_list$Category)==T)==T){
message(">>> PASSED~\n")
} else {
message(">>> FAILED\n")
error_cat <- added_reg_values %>%
mutate(error=ifelse(Category %in% unique(reg_list$Category), T, F)) %>%
filter(error==F)
return(error_cat)
break()
}
message("3. Checking for cross-reference with the updated regressors' list")
if(all(unique(added_reg_values$Regressor) %in% unique(new_reg_list$Name))==T){
message(">>> PASSED\n")
} else {
message(">>> FAILED\n")
error_name <- added_reg_values %>%
mutate(error=ifelse(Regressor %in% unique(new_reg_list$Name), T, F)) %>%
filter(error==F)
return(error_name)
break()
}
message("4. Filtering unique values")
new_reg_values <- unique(new_reg_values)
message(">>> PASSED\n")
new_reg_values
new_reg_values %>% tail()
new_reg_values
new_reg_list
new_reg_list %>% tail()
new_reg_list <- unique(new_reg_list)
new_reg_list
new_reg_list %>% tail()
setwd("..")
require(devtools)
sftools::harvest_reg
build("sftools")
sftools::harvest_reg
build("sftools")
build("sftools")
build("sftools")
build("sftools")
setwd("..")
require(devtools)
build("devtools")
build("sftools")
require(devtools)
document()
build()
styler::style_text()
styler::style_file("newfuncs/apply outlier method only.R")
require(devtools)
document()
document()
document()
document()
document()
check()
check()
check()
document("acov")
document()
check()
build()
build()
styler::style_file("")
styler::style_file("R/detect_seas.R")
